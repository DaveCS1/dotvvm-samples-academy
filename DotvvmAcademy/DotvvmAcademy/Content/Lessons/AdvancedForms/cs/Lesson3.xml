<?xml version="1.0" encoding="UTF-8"?>

<Lesson>
	<ValidatorsNamespace>DotvvmAcademy.Steps.Validation.Validators.Lesson3</ValidatorsNamespace>
	<Steps>

		<!--1-->
		<Step Type="Info">
			<!--Required element-->
			<Title>Komponenty pro fromy</Title>
			<!--Required element-->
			<Description>
				<![CDATA[
V tomto kurzu se podíváme jak používat komponenty `TextBox`, `CheckBox`, `RadioButton` and `ComboBox`. Vyrobíme jednoduchou webovou formu s informacemi o klientovi.
								]]>
			</Description>
		</Step>

		<!--2-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Přidání vlastností FirstName a LastName</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step2Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Nadekladujte vlastnosti `FirstName` a `LastName` typu `string` do následujicí třídy.
]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		// nadeklarujte vlastnosti zde
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
	}
}
]]>
			</FinalCode>
		</Step>

		<!--3-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Použití komponenty TextBox</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step3Validator</ValidationKey>
			<Description>
				<![CDATA[
Přidejte naa stránku dvě komponenty `TextBox` a  vytvořte `bind` vlastnosti `Text` této komponenty na vlastnosti `FirstName` a `LastName`.
								]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<p>
	<!-- umístěne zde první TextBox -->
	<!-- umístěne zde druhý TextBox -->
</p>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}" />
	<dot:TextBox Text="{value: LastName}" />
</p>
								]]>
			</FinalCode>
		</Step>

		<!--4-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Přidání vlastnosti Role</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step4Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Nadekladujte do viewmodelu vlastnost typu string s názvem `Role`  
]]>
			</Description>

			<StartupCode>
				<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		// přidejte vlastnost zde
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
	}
}
]]>
			</FinalCode>
		</Step>

		<!--5-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Použití komponenty RadioButton</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step5Validator</ValidationKey>
			<Description>
				<![CDATA[
Přidejte na stránku dvě komponenty `RadioButton` (přepínač).

Vlastnost `Text` této komponenty odpovídá na text přepínače. Nastavte `Text` jedné komponenty na "Admin" a druhé na "User".

Vlastnost `CheckedItem` nastavuje, která vlastnost ve viewmodelu se bude používat. Nastave tuto vlastnost na `Role` u obou přepínačů.

A nakonec, vlastnost `CheckedValue` určuje, jaká hodnota bude uložená do vlastnosti `Role` ve viewmodelu.

Nastavte `CheckedValue` u jednoho přepínače na "A" a u druhého na "B". 
								]]>
			</Description>

			<!--Required element-->
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}" />
	<dot:TextBox Text="{value: LastName}" />
</p>
<p>
	Role:
	<!-- umístěne zde první RadioButton -->
	<!-- umístěne zde druhý RadioButton -->
</p>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}" />
	<dot:TextBox Text="{value: LastName}" />
</p>
<p>
	Role:
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin" />
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User" />
</p>
								]]>
			</FinalCode>
		</Step>

		<!--6-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Přidání vlstnosti Interests</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step6Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Nadeklarujte vlastnost `Interests` typu `List<string>`. 
]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		// přidejte vlastnost Interests a rovnou inicializujte
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[

using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		public List<string> Interests { get; set; } = new List<string>();
	}
}
]]>
			</FinalCode>
			<!--Optional element-->
			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<string>
												]]>
				</AllowedType>
			</AllowedTypesConstructed>
		</Step>

		<!--7-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Použití komponenty CheckBox</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step7Validator</ValidationKey>
			<Description>
				<![CDATA[
Přidejte na stránku tři komponenty `CheckBox` (zaškrtávací políčko).        
        
Vytvořte bind jejich vlastnosti `CheckedItems` na vlastnost `Interests` ve viewmodelu.

Tímto nastavíme, kde se budou ukládat zašktnuté hodnoty.

Nastavte vlastnost `Text` u těchto tří komponent na "Music", "Sports" a "News".
        
A jako poslední krok nastavíme vlastnosti `CheckedValue` na "M", "S" a "N".

Tato vlastnost určuje, jaká hodnota bude uložená do vlastnosti `Interests` ve viewmodelu.               

								]]>
			</Description>

			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}" />
	<dot:TextBox Text="{value: LastName}" />
</p>
<p>
	Role:
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin" />
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User" />
</p>
<p>
	<!-- přidejte první CheckBox zde -->
	<!-- přidejte druhý CheckBox zde -->
	<!-- přidejte třetí CheckBox zde -->
</p>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}" />
	<dot:TextBox Text="{value: LastName}" />
</p>
<p>
 Role:
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin" />
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User" />
</p>
<p>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Music" CheckedValue="M" />
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Sports" CheckedValue="S" />
	<dot:CheckBox CheckedItems="{value: Interests}" Text="News" CheckedValue="N" />
</p>
								]]>
			</FinalCode>
		</Step>

		<!--8-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Přidání třídy CountryInfo</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step8Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Vytvořte třídu s názem `CountryInfo` a vlastnostmi `Id` typu `int` a `Name` typu `string`.
]]>
			</Description>
			<!--Optional element-->

			<StartupCode>
				<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels
{
	// vytvořte třídu CountryInfo zde
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class CountryInfo
	{
		public int Id { get; set; }
		public string Name { get; set; }
	}
}
]]>
			</FinalCode>
		</Step>

		<!--9-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Přidání kolekce Countries</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step9Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Nadeklarujte vlastnost `Countries` typu `List<CountryInfo>` a `SelectedCountryId` typu `int`.   
]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		// zde nadeklarujte kolekci Countries
		// zde nadeklarujte vlastnost SelectedCountryId
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		public int SelectedCountryId { get; set; }
		public List<CountryInfo> Countries { get; set; } = new List<CountryInfo>();
	}
}
]]>
			</FinalCode>

			<!--Optional element-->
			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class CountryInfo
	{
		public int Id { get; set; }
		public string Name { get; set; }
	}
}
												]]>
				</CodeDependency>
			</CodeDependencies>

			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>
												]]>
				</AllowedType>
			</AllowedTypesConstructed>
		</Step>

		<!--10-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Inicializace kolekce Countries</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step10Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Vytvořte základní konstruktor a inicializujte v ní kolekci `Countries` s těmito objekty:       

* "USA" s vlastností `Id` = 1
* "Canada" s vlastností `Id` = 2
]]>
			</Description>
			<!--Optional element-->
			<StartupCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public Lesson3ViewModel()
		{
			// initialize the countries
		}

		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		public int SelectedCountryId { get; set; }
		public List<CountryInfo> Countries { get; set; } = new List<CountryInfo>();
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public Lesson3ViewModel()
		{
			Countries.Add(new CountryInfo() { Id = 1, Name = "USA" });
			Countries.Add(new CountryInfo() { Id = 2, Name = "Canada" });
		}

		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		public int SelectedCountryId { get; set; }
		public List<CountryInfo> Countries { get; set; } = new List<CountryInfo>();
	}
}
]]>
			</FinalCode>

			<!--Optional element-->
			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class CountryInfo
	{
		public int Id { get; set; }
		public string Name { get; set; }
	}
}
												]]>
				</CodeDependency>
			</CodeDependencies>
			<!--Optional element-->
			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
DotvvmAcademy.Tutorial.ViewModels.CountryInfo
												]]>
				</AllowedType>
			</AllowedTypesConstructed>
			<!--Optional element-->
			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>.Add
												]]>
				</AllowedMethod>
			</AllowedMethodsCalled>
		</Step>

		<!--11-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Použití komponenty ComboBox (rozbalovací nabídka)</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step11Validator</ValidationKey>
			<Description>
				<![CDATA[
Přidjete na stránku komponentu `ComboBox` a napojte vlastnost `DataSource` na kolekci `Countries` ve viewmodelu. Toto naplní rozbalovací nabídku objekty, které jsme inicializovali v konstruktoru.
        
Teď musíme specifikovat která vlastnost objektu, kterými jsme naplnili komponentu ComboBox, se má v nabídce zobrazovat. Nastavte vlastnost komponenty `DisplayMember` na "Name".

Jelikož chceme ukládat jen Id země, kterou z nabídky vybíráme, nastavte vlastnost komponenty `ValueMember` na "Id".

A jelikož chceme vybranou hodnotu ukládat, nastavte `SelectedValue` na vlastnost `SelectedCountryId` ve viewmodelu. 
								]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}" />
	<dot:TextBox Text="{value: LastName}" />
</p>
<p>
 Role:
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin" />
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User" />
</p>
<p>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Music" CheckedValue="M" />
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Sports" CheckedValue="S" />
	<dot:CheckBox CheckedItems="{value: Interests}" Text="News" CheckedValue="N" />
</p>
<p>
 <!-- vložte komponentu ComboBox zde -->
</p>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}" />
	<dot:TextBox Text="{value: LastName}" />
</p>
<p>
 Role:
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin" />
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User" />
</p>
<p>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Music" CheckedValue="M" />
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Sports" CheckedValue="S" />
	<dot:CheckBox CheckedItems="{value: Interests}" Text="News" CheckedValue="N" />
</p>
<p>
	<dot:ComboBox DataSource="{value: Countries}"
				SelectedValue="{value: SelectedCountryId}"
				ValueMember="Id"
				DisplayMember="Name" />
</p>
								]]>
			</FinalCode>
		</Step>

		<!--12-->
		<Step Type="Info">
			<!--Required element-->
			<Title>Třída CustomerInfo</Title>
			<!--Required element-->
			<Description>
				<![CDATA[
V předchozích krocích jsme přidali všechny vlastnosti  `FirstName`, `LastName`, `Role` a `SelectedCountryId` do stejné třídy jako kolekce `Countries`.

Běžně se to nedělá, protože se v jedné třídě míchají údaje konkretního uživatele a další data, které s uživatelem nemají nic společného.
V našem případě je to např. kolekce `Countries`.

Je dobrý nápad přenést všechny vlastnosti, co v sobě uchovavají informace o konkretním uživateli do samostatné třídy. Třídy tohoto typu obvykle nemají žádné metody, ale jen vlastnosti.

Tyto třídy jsou nazvané DTO - Data Transfer Object (objekt přenosu dat)

Takže, jsme přenesli potřebné vlastnosti do samostatné třídy `CustomerInfo`:

```CSHARP
public class CustomerInfo
{
	public string FirstName { get; set; }
	public string LastName { get; set; }
	public string Role { get; set; }
	public int SelectedCountryId { get; set; }
}
```

Kolekce `Countries` zůstane ve viewmodelu.
								]]>
			</Description>
		</Step>

		<!--13-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Přidání vlastnosti CustomerInfo</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step13Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Nadeklarujte vlastnost `NewCustomer` typu `CustomerInfo`.
]]>
			</Description>

			<!--Required element-->
			<StartupCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public Lesson3ViewModel()
		{
			Countries.Add(new CountryInfo() { Id = 1, Name = "USA" });
			Countries.Add(new CountryInfo() { Id = 2, Name = "Canada" });
		}

		// přidejta vlastnost NewCustomer

		public List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo> Countries { get; set; } = new List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>();
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel
	{
		public Lesson3ViewModel ()
		{
			Countries.Add(new CountryInfo() { Id = 1, Name = "USA" });
			Countries.Add(new CountryInfo() { Id = 2, Name = "Canada" });
		}

		public CustomerInfo NewCustomer { get; set; }

		public List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo> Countries { get; set; } = new List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>();
	}
}
]]>
			</FinalCode>

			<!--Optional element-->
			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class CountryInfo
	{
		public int Id { get; set; }
		public string Name { get; set; }
	}
}
												]]>
				</CodeDependency>
				<CodeDependency>
					<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class CustomerInfo
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		public int SelectedCountryId { get; set; }
	}
}
												]]>
				</CodeDependency>
			</CodeDependencies>
			<!--Optional element-->
			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
DotvvmAcademy.Tutorial.ViewModels.CountryInfo
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
DotvvmAcademy.Tutorial.ViewModels.CustomerInfo
										]]>
				</AllowedType>
			</AllowedTypesConstructed>
			<!--Optional element-->
			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>.Add
												]]>
				</AllowedMethod>
			</AllowedMethodsCalled>
		</Step>

		<!--14-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Použití vlastnosti DataContext</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step14Validator</ValidationKey>
			<Description>
				<![CDATA[
Momentálně nejsou bindy na stráce správně, protože viewmodel neobsahuje vlastnosi `FirstName` a další. Přesunuli jsme je do samostatné třídy.        

Aby spojení zase fungovalo, musíme ho napsat ve tvaru `NewCustomer.FirstName` (musíme se odkázat na kontext jiného objektu).

V praxi se chceme těmto komplikovaným zapisům vyhnout a proto se využívá vlastnost `DataContext`.
Tuto vlastnost můžete nastavit na kterémkoli elementu nebo komponentě.

Tato vlastnost řiká, že všechny bindy uvnitř nastaveného elementu jsou vlastnostmi objektu nastavenému ve vlastnosti `DataContext`

Nastavte vlastnost DataContext tagu `p` tímto způsobem : `<p DataContext="{value: NewCustomer}">`. Samotné databindingy se tím pádem nemusí přeposovat.
								]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}" />
	<dot:TextBox Text="{value: LastName}" />
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin" />
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User" />
	<dot:ComboBox DataSource="{value: Countries}"
			SelectedValue="{value: SelectedCountryId}"
			ValueMember="Id"
			DisplayMember="Name">
	</dot:ComboBox>
</p>

								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<p DataContext="{value: NewCustomer}">
	<dot:TextBox Text="{value: FirstName}" />
	<dot:TextBox Text="{value: LastName}" />
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin" />
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User" />
	<dot:ComboBox DataSource="{value: Countries}"
			SelectedValue="{value: SelectedCountryId}"
			ValueMember="Id"
			DisplayMember="Name">
	</dot:ComboBox>
</p>
								]]>
			</FinalCode>
		</Step>

		<!--15-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Řešení chyby komponenty ComboBox</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step15Validator</ValidationKey>
			<Description>
				<![CDATA[
Teď máme chybu v kódu, protože vlastnost `DataSource` komponenty `ComboBox` je nastavena na `Countries`. Objekt `NewCustomer` tuto vlastnost nemá,
protože celkový seznam zemí nemá nic společného s informací o klientovi a proto byl přesunut

Tato kolekce se nachází ve viewmodelu, proto musíme bytvořit bind na rodičovský kontext.

Tento problém se dá byřešit jednoduše tak, že se bind vlastnosti `DataSource` komponenty `ComboBox` přepíše na `_parent.Countries`.
								]]>
			</Description>
			<!--Optional element-->
			<ShadowBoxDescription>
				<![CDATA[
Při zápisu každého spojení (binding expression) se dájí použít hodnoty jako `_parent`, `_this` a `_root`.

* `_parent` reprezenture kontext rodičovského objektu
* `_this` aktuální kontext
* `_root` kontext viewmodelu
								]]>
			</ShadowBoxDescription>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<div DataContext="{value: NewCustomer}">
	<p>
		<dot:TextBox Text="{value: FirstName}" />
		<dot:TextBox Text="{value: LastName}" />
		<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin" />
		<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User" />

		<!--Change the DataSource binding to use the parent binding context-->
		<dot:ComboBox DataSource="{value: Countries}"
				SelectedValue="{value: SelectedCountryId}"
				ValueMember="Id"
				DisplayMember="Name">
		</dot:ComboBox>
	</p>
</div>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<div DataContext="{value: NewCustomer}">
	<p>
		<dot:TextBox Text="{value: FirstName}" />
		<dot:TextBox Text="{value: LastName}" />
		<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin" />
		<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User" />

		<dot:ComboBox DataSource="{value: _parent.Countries}"
				SelectedValue="{value: SelectedCountryId}"
				ValueMember="Id"
				DisplayMember="Name">
		</dot:ComboBox>
	</p>
</div>
								]]>
			</FinalCode>
			<!--16-->
		</Step>

		<Step Type="Info">
			<Title>Gratulujeme!</Title>
			<Description>
				<![CDATA[
**Dokončili jste třetí kurz!**

Naučili jste se používat komponenty jako `ComboBox` a pracovat s kontexty!
								]]>
			</Description>
			<ShadowBoxDescription />
		</Step>
	</Steps>
</Lesson>