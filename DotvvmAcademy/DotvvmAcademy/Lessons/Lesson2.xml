<?xml version="1.0" encoding="UTF-8"?>

<Lesson>
	<ValidatorsNamespace>DotvvmAcademy.Steps.Validation.Validators.Lesson2</ValidatorsNamespace>
	<Steps>

		<!-- 1-->
		<Step Type="Info">
			<Title>Objective</Title>
			<Description>
				<![CDATA[
In this lesson, we'll build a simple to-do list.

<img src="/img/lesson2_step1.gif" alt="Animation" />
				]]>
			</Description>
		</Step>

		<!-- 2-->
		<Step Type="DothtmlCode">
			<Title>Adding New Task</Title>
			<ValidationKey>Lesson2Step2Validator</ValidationKey>
			<Description>
				<![CDATA[
First, we should create the controls which add a new task.

Add the `TextBox` and the `Button` controls to the page. The button should say "Add Task".
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<!-- place textbox and button for adding new task here -->
</p>
<div>
	<!-- we'll display a list of tasks here later -->
</p>
</p>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox />
	<dot:Button Text="Add Task" />
</p>
<div>
	<!-- we'll display a list of tasks here later -->
</p>
								]]>
			</FinalCode>
		</Step>

		<!-- 3-->
		<Step Type="CsharpCode">
			<Title>Adding New Task</Title>
			<ValidationKey>Lesson2Step3Validator</ValidationKey>
			<Description>
				<![CDATA[
Now we should add a property which will represent the title of the new task. Let's name it `AddedTaskTitle`.
Don't remember that every `TextBox` must have its property in the viewmodel, otherwise, the value entered by the user would be lost.

Also, we will need the `AddTask()` method in the viewmodel. For now, make it just empty. It should not return any value.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson2ViewModel 
	{
		//declare the AddedTaskTitle property and the AddTask() method here
	}
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson2ViewModel 
	{
		public string AddedTaskTitle { get; set; }

		public void AddTask() 
		{
		}
	}
}
]]>
			</FinalCode>
		</Step>

		<!-- 4-->
		<Step Type="DothtmlCode">
			<Title>Adding New Task</Title>
			<ValidationKey>Lesson2Step4Validator</ValidationKey>
			<Description>
				<![CDATA[
Now, we need to bind the text in the `TextBox` to the `AddedTaskTitle` property, and the `Button` to the `AddTask()` method.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox />
	<dot:Button Text="Add Task" />
</p>
<div>
	<!-- we'll display a list of tasks here later -->
</p>
</p>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<!-- we'll display a list of tasks here later -->
</p>
								]]>
			</FinalCode>
		</Step>

		<!-- 5-->
		<Step Type="CsharpCode">
			<Title>Representing Tasks</Title>
			<ValidationKey>Lesson2Step5Validator</ValidationKey>
			<Description>
				<![CDATA[
We are ready to create a list of tasks. However, we need a class to represent the task itself.

Each task should have the `Title` property of `string`, and the `IsCompleted` property of `bool`. 

Create a class named `TaskData` and declare the two properties.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	//declare the class here
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class TaskData
	{
		public string Title { get; set; }
		public bool IsCompleted { get; set; }
	}
}
]]>
			</FinalCode>

			<ShadowBoxDescription>
				<![CDATA[
In Visual Studio, this class would be declared in separate file.
]]>
			</ShadowBoxDescription>
		</Step>

		<!-- 6-->
		<Step Type="CsharpCode">
			<Title>Representing Tasks</Title>
			<ValidationKey>Lesson2Step6Validator</ValidationKey>
			<Description>
				<![CDATA[
Now let's go back to our viewmodel. We need to add a list of `TaskData` objects in the viewmodel,
so we can render it in the page.

Add the `Tasks` property to the viewmodel. Its type should be `List<TaskData>` and it should be initialized
to `new List<TaskData>()`.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson2ViewModel 
	{
		public string AddedTaskTitle { get; set; }

		//declare the Tasks property here

		public void AddTask() 
		{
		}
	}
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson2ViewModel 
	{
		public string AddedTaskTitle { get; set; }

		public List<TaskData> Tasks { get; set; } = new List<TaskData>();

		public void AddTask() 
		{
		}
	}
}
]]>
			</FinalCode>
			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class TaskData
	{
		public string Title { get; set; }
		public bool IsCompleted { get; set; }
	}
}
										]]>
				</CodeDependency>

			</CodeDependencies>
			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.TaskData>
										]]>
				</AllowedType>

			</AllowedTypesConstructed>
		</Step>


		<!-- 7-->
		<Step Type="CsharpCode">
			<Title>Adding new Task</Title>
			<ValidationKey>Lesson2Step7Validator</ValidationKey>
			<Description>
				<![CDATA[
Now, we can implement the `AddTask()` method. It should add a new `TaskData` object with the `Title` property set to `AddedTaskTitle` value.

Also, we'd like to reset the `AddedTaskTitle` property, so after the task is created, assign an empty string in it.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson2ViewModel 
	{
		public string AddedTaskTitle { get; set; }

		public List<TaskData> Tasks { get; set; } = new List<TaskData>();

		public void AddTask() 
		{
			//add the new task with the title set to AddedTaskTitle here
						
			//reset the AddedTaskTitle to an empty string
		}
	}
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson2ViewModel 
	{
		public string AddedTaskTitle { get; set; }

		public List<TaskData> Tasks { get; set; } = new List<TaskData>();

		public void AddTask() 
		{
			Tasks.Add(new TaskData() { Title = AddedTaskTitle });
			AddedTaskTitle = "";
		}
	}
}
]]>
			</FinalCode>

			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class TaskData
	{
		public string Title { get; set; }
		public bool IsCompleted { get; set; }
	}
}
										]]>
				</CodeDependency>
			</CodeDependencies>

			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.TaskData>
										]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
DotvvmAcademy.Tutorial.ViewModels.TaskData
										]]>
				</AllowedType>
			</AllowedTypesConstructed>

			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.TaskData>.Add
										]]>
				</AllowedMethod>
			</AllowedMethodsCalled>
		</Step>

		<!-- 8-->
		<Step Type="DothtmlCode">
			<Title>Render The Tasks</Title>
			<ValidationKey>Lesson2Step8Validator</ValidationKey>
			<Description>
				<![CDATA[
We are ready to render a list of tasks right now. For each task, we'd like to render this HTML snippet:

```
<div class="task">
		...
</div>
```

To do this, we'll use the `<dot:Repeater>` control. Add it to the page, bind its `DataSource` property to the `Tasks` property in the viewmodel,
and inside the `<dot:Repeater>`, place the `<div class="task"></div>` element. It will repeat the `div` for each object in the collection.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<!-- place the Repeater control here -->
</p>
</p>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
		<dot:TextBox Text="{value: AddedTaskTitle}" />
		<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task"></div>
	</dot:Repeater>
</p>
								]]>
			</FinalCode>
		</Step>

		<!-- 9-->
		<Step Type="DothtmlCode">
			<Title>Rendering The Tasks</Title>
			<ValidationKey>Lesson2Step9Validator</ValidationKey>
			<Description>
				<![CDATA[
Inside the `<div>`, we'd like to display the task title. If you want to output text directly in the page,
you can use the data-binding syntax with double curly braces, like this: `{{value: Title}}`.

Alternatively, you can use the `<dot:Literal Text="{value: Title}" />` to write a text.

So, render the `Title` of the task inside the `<div>`. Also, add the `<dot:LinkButton>` inside the `<div>`. We'll use it to mark tasks as completed.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
		<dot:TextBox Text="{value: AddedTaskTitle}" />
		<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			<!-- render task title and LinkButton here -->
		</div>
	</dot:Repeater>
</p>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
		<dot:TextBox Text="{value: AddedTaskTitle}" />
		<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton />
		</div>
	</dot:Repeater>
</p>
								]]>
			</FinalCode>
			<ShadowBoxDescription>
				<![CDATA[
The `LinkButton` control works the same way as the `Button`, but it renders a hyperlink.
								]]>
			</ShadowBoxDescription>
		</Step>


		<!-- 10-->
		<Step Type="DothtmlCode">
			<Title>Hiding The LinkButton</Title>
			<ValidationKey>Lesson2Step10Validator</ValidationKey>
			<Description>
				<![CDATA[
The LinkButton should be visible only for tasks which are not completed.

In DotVVM, there is the `Visible` property which can show or hide content. 

Bind the `Visible` property to the `LinkButton` to the `IsCompleted` property of the task. Use the `!` operator to negate the value of `IsCompleted`.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
		<dot:TextBox Text="{value: AddedTaskTitle}" />
		<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton />
		</div>
	</dot:Repeater>
</p>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
		<dot:TextBox Text="{value: AddedTaskTitle}" />
		<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton Visible="{value: !IsCompleted}" />
		</div>
	</dot:Repeater>
</p>
								]]>
			</FinalCode>
			<ShadowBoxDescription>
				<![CDATA[
Please note that the `Visible` property can be used also on any HTML element.
								]]>
			</ShadowBoxDescription>
		</Step>

		<!-- 11-->
		<Step Type="CsharpCode">
			<Title>Completing The Task</Title>
			<ValidationKey>Lesson2Step11Validator</ValidationKey>
			<Description>
				<![CDATA[
When the user clicks the `LinkButton`, we need to trigger a method in the viewmodel.

The method needs to know, on which task it has been executed. We can supply it the task as a parameter.

Declare the `CompleteTask` method which accepts one parameter of type `TaskData` and sets it `IsCompleted` property to `true`.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson2ViewModel 
	{
		public string AddedTaskTitle { get; set; }

		public List<TaskData> Tasks { get; set; } = new List<TaskData>();

		public void AddTask() 
		{
			Tasks.Add(new TaskData() { Title = AddedTaskTitle });
			AddedTaskTitle = "";
		}

		//place the CompleteTask method here
	}
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson2ViewModel 
	{
		public string AddedTaskTitle { get; set; }

		public List<TaskData> Tasks { get; set; } = new List<TaskData>();

		public void AddTask() 
		{
			Tasks.Add(new TaskData() { Title = AddedTaskTitle });
			AddedTaskTitle = "";
		}

		public void CompleteTask(TaskData task) 
		{
			task.IsCompleted = true;
		}
	}
}
]]>
			</FinalCode>

			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
using System;
namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class TaskData
	{
		public string Title { get; set; }
		public bool IsCompleted { get; set; }
	}
}
										]]>
				</CodeDependency>
			</CodeDependencies>
			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.TaskData>
										]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
DotvvmAcademy.Tutorial.ViewModels.TaskData
										]]>
				</AllowedType>
			</AllowedTypesConstructed>
			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.TaskData>.Add
										]]>
				</AllowedMethod>
			</AllowedMethodsCalled>


		</Step>

		<!-- 12-->
		<Step Type="DothtmlCode">
			<Title>Completing The Task</Title>
			<ValidationKey>Lesson2Step12Validator</ValidationKey>
			<Description>
				<![CDATA[
Now we need to set the `Click` property of the link button to the `CompleteTask` method.

Please note that all bindings inside `Repeater` are not evaluated on viewmodel, but on the corresponding `TaskData` object.
But the `CompleteTask` method is in the parent scope - we have declared it in the viewmodel. 

You can use the `_parent.CompleteTask` to reference the method from the parent scope.
When supplying arguments to the method, you begin also in the context of `TaskData`, so you can use `_this` to pass the whole
`TaskData` object to the method.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
		<dot:TextBox Text="{value: AddedTaskTitle}" />
		<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton Visible="{value: !IsCompleted}" />
		</div>
	</dot:Repeater>
</p>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
		<dot:TextBox Text="{value: AddedTaskTitle}" />
		<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton Visible="{value: !IsCompleted}"
							Click="{command: _parent.CompleteTask(_this)}" />
		</div>
	</dot:Repeater>
</p>
								]]>
			</FinalCode>
		</Step>

		<!-- 13-->
		<Step Type="DothtmlCode">
			<Title>Completing The Task</Title>
			<ValidationKey>Lesson2Step13Validator</ValidationKey>
			<Description>
				<![CDATA[
The last thing we want to do, is to strike through tasks which are completed.

If the task is completed, we'd like to render it as `<div class="task-completed"></div>`. 

We need to use data-binding to specify the `class` property of the `<div>`. 

You will need to use the `expression ? truePart : falsePart` operator to do it.
Also note that you can use single quotes (apostrophes) instead of double quotes to use strings in data-binidngs.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
		<dot:TextBox Text="{value: AddedTaskTitle}" />
		<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton Visible="{value: !IsCompleted}"
							Click="{command: _parent.CompleteTask(_this)}" />
		</div>
	</dot:Repeater>
</p>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
		<dot:TextBox Text="{value: AddedTaskTitle}" />
		<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="{value: IsCompleted ? 'task-completed' : 'task'}">
			{{value: Title}}
			<dot:LinkButton Visible="{value: !IsCompleted}"
							Click="{command: _parent.CompleteTask(_this)}" />
		</div>
	</dot:Repeater>
</p>
								]]>
			</FinalCode>
		</Step>

		<!-- 14-->
		<Step Type="Info">
			<Title>Congratulations</Title>
			<Description>
				<![CDATA[
You have finished the second lesson!

You have learned how to use the `Repeater` control and collections in the viewmodel!"
								]]>
			</Description>
			<ShadowBoxDescription />
		</Step>


	</Steps>
</Lesson>