<?xml version="1.0" encoding="UTF-8"?>
<Lesson>
	<ValidatorsNamespace>DotvvmAcademy.Steps.Validation.Validators.Lesson4</ValidatorsNamespace>
	<Steps>
		<!--1-->
		<Step Type="Info">
			<Title>Introduction</Title>
			<Description>
				<![CDATA[
In this lesson, we'll play with the validation in DotVVM.

You'll see how to use Data Annotations attributes in the viewmodels, and how to write more complex validation logic.
								]]>
			</Description>
		</Step>

		<!--2-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Validation Attributes</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step2Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Mark the `City` and `ZIP` properties with the `[Required]` attribute. The validation will make sure that these values are not empty.

Mark the `Email` property with the `[EmailAddress]` attribute. The validation will make sure that this property is either empty, or contains an e-mail address in the correct format.
]]>
			</Description>
			<StartupCode>
				<![CDATA[
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson4ViewModel 
	{
		//add Required attribute
		public string City { get; set; }
		//add Required attribute
		public string ZIP { get; set; }
		//add EmailAddress attribute
		public string Email { get; set; }
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson4ViewModel 
	{
		[Required]
		public string City { get; set; }
		[Required]
		public string ZIP { get; set; }
		[EmailAddress]
		public string Email { get; set; }
	}
}
]]>
			</FinalCode>

			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.EmailAddressAttribute
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.RequiredAttribute
												]]>
				</AllowedType>
			</AllowedTypesConstructed>
		</Step>

		<!--3-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Validation Basics</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step3Validator</ValidationKey>
			<Description>
				<![CDATA[
In the page, you can invoke the validation using the `Validator.Value` property.  
Depending on the settings of the validation, it may for example add a CSS class when some property is not valid.

You can add this property to any HTML element or DotVVM control.
Add the `Validator.Value` property to each `div` and bind it to the property which is used in the `TextBox` inside.
								]]>
			</Description>

			<StartupCode>
				<![CDATA[
 <!--bind div to Validator.Value for current property-->
<div>
		<dot:TextBox Text="{value: City}"/>
</div>
 <!--bind div to Validator.Value for current property-->
<div>
	<dot:TextBox Text="{value: ZIP}"/>
</div>
 <!--bind div to Validator.Value for current property-->
<div>
	<dot:TextBox Text="{value: Email}"/>
</div>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<div Validator.Value="{value: City}">
	<dot:TextBox Text="{value: City}"/>
</div>
<div Validator.Value="{value: ZIP}">
	<dot:TextBox Text="{value: ZIP}"/>
</div>
<div Validator.Value="{value: Email}">
	<dot:TextBox Text="{value: Email}"/>
</div>
								]]>
			</FinalCode>
		</Step>

		<!--4-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Using Validation.InvalidCssClass</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step4Validator</ValidationKey>
			<Description>
				<![CDATA[
We have marked elements which can interact with the validation of the individual properties.

Now we have to specify what should happen when the property is not valid.
We'd like to add a CSS clas `has-error` to the `div`s which are not valid. This will highlight the textboxes inside.

Add the `Validation.InvalidCssClass="has-error"` to each `div`. 
								]]>
			</Description>

			<!--Required element-->
			<StartupCode>
				<![CDATA[
<!--add Validator.InvalidCssClass-->
<div Validator.Value="{value: City}">
	<dot:TextBox Text="{value: City}"/>
</div>
<!--add Validator.InvalidCssClass-->
<div Validator.Value="{value: ZIP}">
	<dot:TextBox Text="{value: ZIP}"/>
</div>
<!--add Validator.InvalidCssClass-->
<div Validator.Value="{value: Email}">
	<dot:TextBox Text="{value: Email}"/>
</div>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<div Validator.Value="{value: City}" Validator.InvalidCssClass="has-error">
	<dot:TextBox Text="{value: City}"/>
</div>
<div Validator.Value="{value: ZIP}" Validator.InvalidCssClass="has-error">
	<dot:TextBox Text="{value: ZIP}"/>
</div>
<div Validator.Value="{value: Email}" Validator.InvalidCssClass="has-error">
	<dot:TextBox Text="{value: Email}"/>
</div>
								]]>
			</FinalCode>

		</Step>

		<!--5-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Global Validation Settings</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step5Validator</ValidationKey>
			<Description>
				<![CDATA[
Specifying `Validator.InvalidCssClass` on each validated element is quite annoying. However, you can use this property on any element and it will propagate into all its children.
So you can set this property globally e.g. on the `body` element.

So, you can now remove the `Validator.InvalidCssClass` from the `div`s, wrap the form in the `form` element and use the property on the `form` instead.
								]]>
			</Description>

			<!--Required element-->
			<StartupCode>
				<![CDATA[
<!-- wrap the contents in the form element with Validator.InvalidCssClass set -->
	
  <!--remove redundant Validator.InvalidCssClass-->
	<div Validator.Value="{value: City}" Validator.InvalidCssClass="has-error">
		<dot:TextBox Text="{value: City}"/>
	</div>
	<!--remove redundant Validator.InvalidCssClass-->
	<div Validator.Value="{value: ZIP}" Validator.InvalidCssClass="has-error">
		<dot:TextBox Text="{value: ZIP}"/>
	</div>
	<!--remove redundant Validator.InvalidCssClass-->
	<div Validator.Value="{value: Email}" Validator.InvalidCssClass="has-error">
		<dot:TextBox Text="{value: Email}"/>
	</div>
<!--don't forget close form element-->
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<form Validator.InvalidCssClass="has-error">
	<div Validator.Value="{value: City}">
		<dot:TextBox Text="{value: City}"/>
	</div>
	<div Validator.Value="{value: ZIP}">
		<dot:TextBox Text="{value: ZIP}"/>
	</div>
	<div Validator.Value="{value: Email}">
		<dot:TextBox Text="{value: Email}"/>
	</div>
</form>
								]]>
			</FinalCode>

		</Step>

		<!--6-->
		<Step Type="Info">
			<!--Required element-->
			<Title>Validator Control</Title>
			<!--Required element-->
			<Description>
				<![CDATA[
If you just need to display an error message, you can use the `dot:Validator` control.

There are the `ShowErrorMessageText` and `SetToolTipText` properties. If they are set, the error message generated by the `[Required]` attribute will be displayed in the `Validator` control or is set as a tool tip text on the element. 
								
To learn more about the `Validator` control, read the [documentation](https://www.dotvvm.com/docs/controls/builtin/Validator/latest). 
								]]>
			</Description>
		</Step>

		<!--7-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Using Validator</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step7Validator</ValidationKey>
			<Description>
				<![CDATA[
Add a `Validator` control in the third `div` and set its `Value` to the `Email` in the viewmodel.

Also, set property `ShowErrorMessageText` to "true".
								]]>
			</Description>
			<!--Optional element-->
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<form Validator.InvalidCssClass="has-error">
	<div Validator.Value="{value: City}">
		<dot:TextBox Text="{value: City}"/>
	</div>
	<div Validator.Value="{value: ZIP}">
		<dot:TextBox Text="{value: ZIP}"/>
	</div>
	<div Validator.Value="{value: Email}">
		<dot:TextBox Text="{value: Email}"/>
		<!--use Validator with ShowErrorMessageText on Email property-->
	</div>
</form>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<form Validator.InvalidCssClass="has-error">
	<div Validator.Value="{value: City}">
		<dot:TextBox Text="{value: City}"/>
	</div>
	<div Validator.Value="{value: ZIP}">
		<dot:TextBox Text="{value: ZIP}"/>
	</div>
	<div Validator.Value="{value: Email}">
		<dot:TextBox Text="{value: Email}"/>
		<dot:Validator Value="{value: Email}" ShowErrorMessageText="true"/>
	</div>
</form>
								]]>
			</FinalCode>

		</Step>

		<!--8-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Using ValidationSummary</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step8Validator</ValidationKey>
			<Description>
				<![CDATA[
To display all errors from the form, you can use the `ValidationSummary` control. 

Add this control to the end of the form.
								]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<form Validator.InvalidCssClass="has-error">
	<div Validator.Value="{value: City}">
		<dot:TextBox Text="{value: City}"/>
	</div>
	<div Validator.Value="{value: ZIP}">
		<dot:TextBox Text="{value: ZIP}"/>
	</div>
	<div Validator.Value="{value: Email}">
		<dot:TextBox Text="{value: Email}"/>
	</div>
</form>
<!-- add the ValidationSummary control -->
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<form Validator.InvalidCssClass="has-error">
	<div Validator.Value="{value: City}">
		<dot:TextBox Text="{value: City}"/>
	</div>
	<div Validator.Value="{value: ZIP}">
		<dot:TextBox Text="{value: ZIP}"/>
	</div>
	<div Validator.Value="{value: Email}">
		<dot:TextBox Text="{value: Email}"/>
	</div>
</form>
<dot:ValidationSummary />
								]]>
			</FinalCode>

		</Step>

		<!--9-->
		<Step Type="Info">
			<!--Required element-->
			<Title>Partial Validation</Title>
			<!--Required element-->
			<Description>
				<![CDATA[
By default, all buttons run validation on the whole viewmodel and if there is any error, the command in the viewmodel is not executed at all.

However, the viewmodel often contains some child objects and you don't want to validate everything. 

In such case you can use the `Validation.Target="{value: Property}"`. You can apply this property to any element or DotVVM control.

Inside this element or control, the validation rules will be checked only on the `Validation.Target` you have specified. 
								]]>
			</Description>
		</Step>

		<!--10-->
		<Step Type="Info">
			<!--Required element-->
			<Title>Partial Validation II</Title>
			<!--Required element-->
			<Description>
				<![CDATA[
You can also disable the validation completely by adding `Validation.Enabled="false"`. Again, this can be set on any element or control, and it disables the 
validation on this element and all its children.

Please note that the validation is triggered by the `{command: something}` bindings. 

That's why you have to apply `Validation.Enabled` or `Validation.Target` always to a button or the control with a command binding.
Turning the validation off only on the form fields doesn't do anything.
								]]>
			</Description>
		</Step>

		<!--11-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Add ViewModel Properties</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step11Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Declare the `SubscriptionFrom` and `SubscriptionTo` of type `DateTime` in the viewmodel.

We will need to make sure that the first one contains a lower value than the second one.
]]>
			</Description>

			<!--Required element-->
			<StartupCode>
				<![CDATA[
using System;
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson4ViewModel 
	{
		[Required]
		public string City { get; set; }
		[Required]
		public string ZIP { get; set; }
		[EmailAddress]
		public string Email { get; set; }
    
		// add the SubscriptionFrom property
		// add the SubscriptionTo property
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System;
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson4ViewModel 
	{
		[Required]
		public string City { get; set; }
		[Required]
		public string ZIP { get; set; }
		[EmailAddress]
		public string Email { get; set; }
    
		public DateTime SubscriptionFrom { get; set; }
		public DateTime SubscriptionTo { get; set; }
	}
}
]]>
			</FinalCode>

			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.EmailAddressAttribute
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.RequiredAttribute
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.DateTime
												]]>
				</AllowedType>
			</AllowedTypesConstructed>

			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.ComponentModel.DataAnnotations.RequiredAttribute.IsValid
												]]>
				</AllowedMethod>
				<AllowedMethod>
					<![CDATA[
System.ComponentModel.DataAnnotations.EmailAddressAttribute.IsValid
												]]>
				</AllowedMethod>
			</AllowedMethodsCalled>
		</Step>

		<!--13-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Implement IValidatableObject</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step13Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
To make sure that `SubscriptionFrom` is less than `SubscriptionTo`, we need to validate the object using C# code.

The `Lesson4ViewModel` must implement the `IValidatableObject` interface. This interface contains the `Validate` method, which should return list of the validation errors.
They are combined with the errors returned by the validation attributes, so you don't need to care about the other properties.

You can return the error using the `yield return new ValidationResult("error message")`. Return it if the `SubscriptionFrom` is greater than `SubscriptionTo`.
]]>
			</Description>
			<!--Optional element-->
			<StartupCode>
				<![CDATA[
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson4ViewModel : IValidatableObject
	{
		[Required]
		public string City { get; set; }
		[Required]
		public string ZIP { get; set; }
		[EmailAddress]
		public string Email { get; set; }
		public DateTime SubscriptionFrom { get; set; }
		public DateTime SubscriptionTo { get; set; }

		public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
		{
			// check the condition and return the error using yield return new ValidationResult("error message");
		}
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson4ViewModel : IValidatableObject
	{
		[Required]
		public string City { get; set; }
		[Required]
		public string ZIP { get; set; }
		[EmailAddress]
		public string Email { get; set; }
		public DateTime SubscriptionFrom { get; set; }
		public DateTime SubscriptionTo { get; set; }

		public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
		{
			if (SubscriptionFrom > SubscriptionTo)
			{
				yield return new ValidationResult("SubscriptionFrom shold be less that SubscriptionTo!");
			}
		}
	}
}
]]>
			</FinalCode>

			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.EmailAddressAttribute
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.RequiredAttribute
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.DateTime
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.IValidatableObject
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<System.ComponentModel.DataAnnotations.ValidationResult>
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.ValidationResult
												]]>
				</AllowedType>
			</AllowedTypesConstructed>
			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.Collections.Generic.List<System.ComponentModel.DataAnnotations.ValidationResult>.Add
												]]>
				</AllowedMethod>
			</AllowedMethodsCalled>

		</Step>

		<!--Required element-->
		<Step Type="Info">
			<Title>Congratulations</Title>
			<Description>
				<![CDATA[
**You have finished the fourth lesson!**

You have learned how to use the validation in DotVVM!
								]]>
			</Description>
		</Step>

	</Steps>

</Lesson>