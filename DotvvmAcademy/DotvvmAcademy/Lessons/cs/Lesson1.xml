<?xml version="1.0" encoding="UTF-8"?>

<Lesson>
	<ValidatorsNamespace>DotvvmAcademy.Steps.Validation.Validators.Lesson1</ValidatorsNamespace>
	<Steps>
		<Step Type="Info">
			<Title>Prerekvizity</Title>
			<Description>
				<![CDATA[
K vytvoření webových aplikací v DotVVM, musíte znát tyto technologie:

+ **HTML a CSS** - psát statické stránky pomocí HTML a používat CSS ke stylování těchto stránek
+ **C# Language** - musítě vědět jak v tomto jazyce nadeklarovat třídu s vlastnostmi a metodami

Pokud něco z toho neovládáte v plné míře, doporučujeme je podívat na [SoloLearn](https://www.sololearn.com/Course/HTML/). Zde naleznete kvalitní interaktivní kurzy pro začátečníky.
								]]>
			</Description>
		</Step>

		<Step Type="Info">
			<Title>Úvod</Title>
			<Description>
				<![CDATA[
V tomto kurzu vytvoříme jednoduchou kalkulačku.
Bude to webová stránka s třemi textovými poli a jedním tlačítkem. 

Uživatel vyplní textová pole čísly a po zmáčknutí tlačítka
se do třetího textového pole promítne součet dvou čísel

<img src="/img/lesson1_step2.gif" alt="Animation" />
								]]>
			</Description>
		</Step>

		<Step Type="DothtmlCode">
			<Title>Základní komponenty</Title>
			<ValidationKey>Lesson1Step3Validator</ValidationKey>
			<Description>
				<![CDATA[
V DotVVM máme speciální komponenty.

Takže místo `<input type="text" />` používáme `<dot:TextBox />`. Stejně tak máme `<dot:Button />`, komponentu, která reprezentuje tlačítko.
        
Zkuste vytvořit stránku s třemi textovými poli a jedním tlačítkem. 
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<!-- umístětě první textové pole zde -->
	+
	<!-- umístětě druhé textové pole zde -->
	=
	<!-- umístětě třetí textové pole zde -->
</p>
<p>
	<!-- umístětě tlačítko zde -->
</p>
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox />
	+
	<dot:TextBox />
	=
	<dot:TextBox />
</p>
<p>
	<dot:Button />
</p>
								]]>
			</FinalCode>
			<ShadowBoxDescription>
				<![CDATA[
Nezapomeňte uzavřít nepárové elementy pomocí koncové značky ` />`. Komponenty, stejně jako tagy v HTML, mohou, nebo nemusí být párové.
]]>
			</ShadowBoxDescription>
		</Step>

		<Step Type="CsharpCode">
			<Title>Vlastnosti ve ViewModel</Title>
			<ValidationKey>Lesson1Step4Validator</ValidationKey>
			<Description>
				<![CDATA[
V DotVVM má každá stránka (view) svůj viewmodel. Ve viewmodelu jsou uložené údaje z komponent na stránce nebo cokoli dalšího, co se může dynamicky měnit a interaktovat s uživatelem.
        
Viewmodel je třída v jazyce C#, ve které údaje ze stránky jsou úloženy ve veřejných vlastnostech.

Nadeklarujte tři vlastnoti - `Number1`, `Number2` and `Result`, všechny musí být typu `int`.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson1ViewModel
	{
		// nadeklarujte vlastnosi zde
	}
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson1ViewModel
	{
		public int Number1 { get; set; }
		public int Number2 { get; set; }
		public int Result { get; set; }
	}
}
]]>
			</FinalCode>

			<ShadowBoxDescription>
				<![CDATA[
Údaje zadané uživatelem se uloží do vlastností Number1, Number2. Součet těchto čísel uložíme do vlastnosti `Result` poté, co uživatel zmáčkne tlačítko.
]]>
			</ShadowBoxDescription>
		</Step>

		<Step Type="CsharpCode">
			<Title>Příkazy (Commands) ve ViewModel</Title>
			<ValidationKey>Lesson1Step5Validator</ValidationKey>
			<Description>
				<![CDATA[
Teď musíme napsat metodu, která spočítá součet dvou čísel. Tuto metodu musíme nadeklarovat v našem viewmodelu.        
        
Vytvořte metodu s nazvem `Calculate`, která spočítá součet dvou čísel `Number1`, `Number2` a uloží výsledek do vlastnosti `Result`. 
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson1ViewModel
	{
		public int Number1 { get; set; }
		public int Number2 { get; set; }
		public int Result { get; set; }

		// nadeklarujte metodu Calculate zde
	}
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson1ViewModel
	{
		public int Number1 { get; set; }
		public int Number2 { get; set; }
		public int Result { get; set; }

		public void Calculate()
		{
			Result = Number1 + Number2;
		}
	}
}
]]>
			</FinalCode>

			<ShadowBoxDescription>
				<![CDATA[
Metoda musí výt veřejná a musí být typu void (nevrací žádnou hodnotu).
]]>
			</ShadowBoxDescription>
		</Step>

		<Step Type="DothtmlCode">
			<Title>Data-Binding textových polí</Title>
			<ValidationKey>Lesson1Step6Validator</ValidationKey>
			<Description>
				<![CDATA[
Teď musíme propojit naše textová pole s vlastnostmi ve viewmodelu. Poté, co uživatel zadá hodnotu do textového pole, hodnota se
automaticky promítne do vlastnosti ve viewmodelu. Stejně tak, když programově změníte vlastnost ve viewmodelu, změní se i hodnota na stránce.
        
Tento mechanismus se nazývá **data-binding**. K propojení textového pole a vlastosti ve viewmodelu, použíjte na stránce následujicí syntaxi:

```<dot:TextBox Text="{value: Number1}" />```

Propojte jednotlivá textová pole s příslušnými vlastnostmi.
]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox />
	+
	<dot:TextBox />
	=
	<dot:TextBox />
</p>
<p>
	<dot:Button />
</p>
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: Number1}" />
	+
	<dot:TextBox Text="{value: Number2}" />
	=
	<dot:TextBox Text="{value: Result}" />
</p>
<p>
	<dot:Button />
</p>
								]]>
			</FinalCode>
		</Step>

		<Step Type="DothtmlCode">
			<Title>Data-Binding tlačítka</Title>
			<ValidationKey>Lesson1Step7Validator</ValidationKey>
			<Description>
				<![CDATA[
Teď potřebujeme propojit tlačítko s metodou `Calculate`, kterou jsme nadeklarovali ve viewmodelu v jednom z předchozích kroků.

Použijte následujicí syntaxi pro binding příkazu: `Click="{command: Calculate()}"`. 

Také vychom mohli změnit text na tlačítku (např. na "Sečti!"). K tomu slouží vlastnost komponenty <dot:Button /> `Text`.
Jelikož se text na tlačítku nemění v průběhu programu, nepotřebujeme tento text ukládat do viewmodelu.
Můžeme text nadeklarovat rovnou do DotHTML kódu takto: `Text="Calculate!"`.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: Number1}" />
	+
	<dot:TextBox Text="{value: Number2}" />
	=
	<dot:TextBox Text="{value: Result}" />
</p>
<p>
	<dot:Button />
</p>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: Number1}" />
	+
	<dot:TextBox Text="{value: Number2}" />
	=
	<dot:TextBox Text="{value: Result}" />
</p>
<p>
	<dot:Button Text="Calculate!" Click="{command: Calculate()}" />
</p>
						]]>
			</FinalCode>
		</Step>

		<Step Type="Info">
			<Title>Gratulujeme!</Title>
			<Description>
				<![CDATA[
**Dokončili jste první kurz**

Naučili jste se, jak používat komponenty v DotVVM a používat data-binding s vlastnostmi a příkazy.
        				]]>
			</Description>
		</Step>
	</Steps>
</Lesson>