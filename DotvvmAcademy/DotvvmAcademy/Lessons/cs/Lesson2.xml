<?xml version="1.0" encoding="UTF-8"?>

<Lesson>
	<ValidatorsNamespace>DotvvmAcademy.Steps.Validation.Validators.Lesson2</ValidatorsNamespace>
	<Steps>

		<!-- 1-->
		<Step Type="Info">
			<Title>Úvod</Title>
			<Description>
				<![CDATA[
Cílem v tomto kurzu je vytvořit jednoduchý To-do-list ("Musím-udělat-seznam")

<img src="/img/lesson2_step1.gif" alt="Animation" />
				]]>
			</Description>
		</Step>

		<!-- 2-->
		<Step Type="DothtmlCode">
			<Title>Přidání nového úkolu</Title>
			<ValidationKey>Lesson2Step2Validator</ValidationKey>
			<Description>
				<![CDATA[
Nejprve musíme udělat komponentu, která přidá nový úkol

Přidejte komponenty `TextBox` a `Button` na stránku. Tlačítko musí mít nadpis "Přidat úkol"
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<!-- úmístěte zde textové pole a tlačítko -->
</p>
<div>
	<!-- později zde zobrazíme seznam úkolů -->
</p>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox />
	<dot:Button Text="Přidat úkol" />
</p>
<div>
	<!-- později zde zobrazíme seznam úkolů -->
</p>
								]]>
			</FinalCode>
		</Step>

		<!-- 3-->
		<Step Type="CsharpCode">
			<Title>Přidání nového úkolu</Title>
			<ValidationKey>Lesson2Step3Validator</ValidationKey>
			<Description>
				<![CDATA[
Teď musíme přidat vlastnost, která by představovala nadpis každého úkolů. Nazveme vlastnost `AddedTaskTitle`.
Nezapomeňte, že každý další `TextBox` musí mít svojí vlastnost ve viewmodelu, jinak se některá data můžou ztratit.

Taktéž musíme přidat metodu `AddTask()` do viewmodelu. Zatím jí necháme prázdnou. Metoda nesmí vracet žádnou hodnotu.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson2ViewModel
	{
		//nadeklarujte vlastnost AddedTaskTitle a metodu AddTask()
	}
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson2ViewModel
	{
		public string AddedTaskTitle { get; set; }

		public void AddTask()
		{
		}
	}
}
]]>
			</FinalCode>
		</Step>

		<!-- 4-->
		<Step Type="DothtmlCode">
			<Title>Přidání nového úkolu</Title>
			<ValidationKey>Lesson2Step4Validator</ValidationKey>
			<Description>
				<![CDATA[
Teď musíme propojit text komponenty `TextBox` s vlastností `AddedTaskTitle`, a `Button` s metodou `AddTask()`.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox />
	<dot:Button Text="Add Task" />
</p>
<div>
	<!-- později zde zobrazíme seznam úkolů -->
</p>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<!-- později zde zobrazíme seznam úkolů -->
</p>
								]]>
			</FinalCode>
		</Step>

		<!-- 5-->
		<Step Type="CsharpCode">
			<Title>Zobrazení úkolů</Title>
			<ValidationKey>Lesson2Step5Validator</ValidationKey>
			<Description>
				<![CDATA[
Ještě před zobrazením seznamu úkolů, potřebujeme třídu, která bude úkol reprezentovat.

Každý úkol musí mít vlastnost `Title` typu `string`, a vlastnost `IsCompleted` typu `bool`.

Vytvořte třídu s názvem `TaskData` a deklarujte tyto dvě vlastnosti
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	//nadeklarujte třídu zde
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class TaskData
	{
		public string Title { get; set; }
		public bool IsCompleted { get; set; }
	}
}
]]>
			</FinalCode>

			<ShadowBoxDescription>
				<![CDATA[
V programu Visual Studio by musela tato třída být deklarována v samostátném souboru.
]]>
			</ShadowBoxDescription>
		</Step>

		<!-- 6-->
		<Step Type="CsharpCode">
			<Title>Zobrazení úkolů</Title>
			<ValidationKey>Lesson2Step6Validator</ValidationKey>
			<Description>
				<![CDATA[
Teď se poďte vrátit zpátky do našeho viewmodelu. Musíme přidat seznam objektů `TaskData`, 
abychom jsme je mohli zobrazit na stránce.

Přidejte vlastnost `Tasks` do viewmodelu. Vlastnost musí být typu `List<TaskData>`
a musí být rovnou inicializováná jako `new List<TaskData>()`.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson2ViewModel
	{
		public string AddedTaskTitle { get; set; }

		//nadeklarujte zde vlastnost `Tasks`

		public void AddTask()
		{
		}
	}
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson2ViewModel
	{
		public string AddedTaskTitle { get; set; }

		public List<TaskData> Tasks { get; set; } = new List<TaskData>();

		public void AddTask()
		{
		}
	}
}
]]>
			</FinalCode>
			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class TaskData
	{
		public string Title { get; set; }
		public bool IsCompleted { get; set; }
	}
}
										]]>
				</CodeDependency>
			</CodeDependencies>
			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.TaskData>
										]]>
				</AllowedType>
			</AllowedTypesConstructed>
		</Step>

		<!-- 7-->
		<Step Type="CsharpCode">
			<Title>Přidání nového úkolů</Title>
			<ValidationKey>Lesson2Step7Validator</ValidationKey>
			<Description>
				<![CDATA[
Teď je na čase naimplementovat metodu `AddTask()`. Tato metoda by měla přidávat nový objekt typu `TaskData`
s vlastností `Title` nastavenou na `AddedTaskTitle`

Taktéž, po přidání objektu, potřebujeme přenastavit vlastnost `AddedTaskTitle` na prázdný řetězec.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson2ViewModel
	{
		public string AddedTaskTitle { get; set; }

		public List<TaskData> Tasks { get; set; } = new List<TaskData>();

		public void AddTask()
		{
			//přidejte do seznamu Tasks nový úkol a vyplňtě jeho vlastnost `Title` řetězcem `AddedTaskTitle`

			//přenastavte vlastnost `AddedTaskTitle` na prázdný řetězec.
		}
	}
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson2ViewModel
	{
		public string AddedTaskTitle { get; set; }

		public List<TaskData> Tasks { get; set; } = new List<TaskData>();

		public void AddTask()
		{
			Tasks.Add(new TaskData() { Title = AddedTaskTitle });
			AddedTaskTitle = "";
		}
	}
}
]]>
			</FinalCode>
			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class TaskData
	{
		public string Title { get; set; }
		public bool IsCompleted { get; set; }
	}
}
										]]>
				</CodeDependency>
			</CodeDependencies>

			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.TaskData>
										]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
DotvvmAcademy.Tutorial.ViewModels.TaskData
										]]>
				</AllowedType>
			</AllowedTypesConstructed>

			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.TaskData>.Add
										]]>
				</AllowedMethod>
			</AllowedMethodsCalled>
		</Step>

		<!-- 8-->
		<Step Type="DothtmlCode">
			<Title>Zobrazení úkolů</Title>
			<ValidationKey>Lesson2Step8Validator</ValidationKey>
			<Description>
				<![CDATA[
Jsme připraveni zobrazit seznam úkolů na stránce. Pro každý úkol budeme chtít vygenerovat tento HTML tag:

```
<div class="task">
		...
</div>
```

K tomu využijeme další DotVVM komponenty: `<dot:Repeater>`. Přijdejte jí na stránku a propojte její vlastnost `DataSource` s vlastností `Tasks` ve viewmodelu.
Dovnitř do komponenty umístěte `<div class="task"></div>`. Komponenta vygeneruje tento HTML tag pro každý prvek v seznamu.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<!-- zde umístěte komponentu <dot:Repeater> -->
</div>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task"></div>
	</dot:Repeater>
</div>
								]]>
			</FinalCode>
		</Step>

		<!-- 9-->
		<Step Type="DothtmlCode">
			<Title>Zobrazení úkolů</Title>
			<ValidationKey>Lesson2Step9Validator</ValidationKey>
			<Description>
				<![CDATA[
Do tagu `<div>` bychom ještě chtěli zobrazit název každého úkolu. Pokud chcete zobrazit text přímo do stránky,
můžete použít data-binding a využít syntaxi se zdvojenými složenými závorkami takto: `{{value: Title}}`.

Nebo můžete využít komponenty `<dot:Literal>` a její vlastnosti `Text` takto: `<dot:Literal Text="{value: Title}" />`

Tímto způsobem budeme generovat názvy naších úkolů. Taktéž přidejte komponentu `<dot:LinkButton>` do tagu `<div>`.
Tohoho tlačítka využijem k tomu, abychom mohli úkoly označovat jako hotové.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			<!-- dopiště zde data-binding pro zobrazení názvu úkolu -->
      <!-- zde doplňte komponentu LinkButton -->
		</div>
	</dot:Repeater>
</div>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton />
		</div>
	</dot:Repeater>
</div>
								]]>
			</FinalCode>
			<ShadowBoxDescription>
				<![CDATA[
Komponenta `<dot:LinkButton>` funguje stejně jako `Button`, ale do stránky se vygeneruje odkaz místo tagu <button>
								]]>
			</ShadowBoxDescription>
		</Step>

		<!-- 10-->
		<Step Type="DothtmlCode">
			<Title>Schování tlačítek</Title>
			<ValidationKey>Lesson2Step10Validator</ValidationKey>
			<Description>
				<![CDATA[
Komponenta LinkButton musí být zobrazená pouze v případě, že úkol ještě není splněn.        
        
V DotVVM má kazdý HTML tag nebo komponenta vlastnost `Visible`.
Nastavením této vlastnosti můžeme schovávat nebo zobrazovat jednotlivé komponenty a tagy.

Propojete vlastnost `IsCompleted` každého úkolu s vlastností `Visible` komponenty `LinkButton`.
Tím docílíme toho, že se tlačítka zobrazí pouze u ukolů, co ještě nejsou hotové.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton />
		</div>
	</dot:Repeater>
</div>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton Visible="{value: !IsCompleted}" />
		</div>
	</dot:Repeater>
</div>
								]]>
			</FinalCode>
			<ShadowBoxDescription>
				<![CDATA[
Vlastnost `Visible` může být v DotVVM nastavena na kterémkoli elementu v HTML
								]]>
			</ShadowBoxDescription>
		</Step>

		<!-- 11-->
		<Step Type="CsharpCode">
			<Title>Splnění úkolu po zmáčknutí tlačítka</Title>
			<ValidationKey>Lesson2Step11Validator</ValidationKey>
			<Description>
				<![CDATA[
Když uživatel klikne na komponentu `LinkButton`, musí se spustit funkce ve viewmodelu.        
        
Samotná metoda musí vědět, na kterém úkolu byla spuštěná, proto musíme nastavit objekt úkolu jako parametr.

Nadeklarujte metodu `CompleteTask` s parametrem typu `TaskData`.
V těle metody uveďtě, že se danému objektu nastaví vlastnost `IsCompleted` na `true`.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson2ViewModel
	{
		public string AddedTaskTitle { get; set; }

		public List<TaskData> Tasks { get; set; } = new List<TaskData>();

		public void AddTask()
		{
			Tasks.Add(new TaskData() { Title = AddedTaskTitle });
			AddedTaskTitle = "";
		}

		//přidejte zde metodu CompleteTask
	}
}
]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
using System;
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson2ViewModel
	{
		public string AddedTaskTitle { get; set; }

		public List<TaskData> Tasks { get; set; } = new List<TaskData>();

		public void AddTask()
		{
			Tasks.Add(new TaskData() { Title = AddedTaskTitle });
			AddedTaskTitle = "";
		}

		public void CompleteTask(TaskData task)
		{
			task.IsCompleted = true;
		}
	}
}
]]>
			</FinalCode>

			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
using System;
namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class TaskData
	{
		public string Title { get; set; }
		public bool IsCompleted { get; set; }
	}
}
										]]>
				</CodeDependency>
			</CodeDependencies>
			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.TaskData>
										]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
DotvvmAcademy.Tutorial.ViewModels.TaskData
										]]>
				</AllowedType>
			</AllowedTypesConstructed>
			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.TaskData>.Add
										]]>
				</AllowedMethod>
			</AllowedMethodsCalled>
		</Step>

		<!-- 12-->
		<Step Type="DothtmlCode">
			<Title>Splnění úkolu po zmáčknutí tlačítka</Title>
			<ValidationKey>Lesson2Step12Validator</ValidationKey>
			<Description>
				<![CDATA[
Teď musíme nastavit vlastnost `Click` komponenty `LinkButton` na metodu `CompleteTask`.
        
Všimněte si, že všechny bindings uvniř komponenty `Repeater` neodkazují na vlastnosti a příkazy ve
viewmodelu, ale na vlastnosti objektu `TaskData`.
Metoda `CompleteTask` je však deklarována o vrstvu výš, ve viewmodelu.

V tomto případě využijeme `_parent.CompleteTask()` a tím se odkážeme na objekt o úroveň výš.
Při dodání argumentů do metody, jsme pořád v kontextu objektu `TaskData`. Můžete využít `_this` a tím
do argumentu dodáme celý objekt.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton Visible="{value: !IsCompleted}" />
		</div>
	</dot:Repeater>
</div>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton Visible="{value: !IsCompleted}"
							Click="{command: _parent.CompleteTask(_this)}" />
		</div>
	</dot:Repeater>
</div>
								]]>
			</FinalCode>
		</Step>

		<!-- 13-->
		<Step Type="DothtmlCode">
			<Title>Splnění úkolu po zmáčknutí tlačítka</Title>
			<ValidationKey>Lesson2Step13Validator</ValidationKey>
			<Description>
				<![CDATA[
Poslední věc, kterou bychom chtěli udělat, je přeškrtnout všechny úkoly,
které jsou již hotové.
        
Pokud je úkol hotový, chtěli bychom ho vygenerovat takto `<div class="task-completed"></div>`.

Využijeme data-binding a nastavíme vlastnost `class` tagu `<div>`.

Budeme potřebovat ternární operátor.
Má následujicí konstrukci: `(booleovský výraz) ? výraz_při_splnění : výraz_při_nesplnění`.

K zapsání stringu do data-bindingu, využijte jednoduchých uvozovek.
								]]>
			</Description>
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="task">
			{{value: Title}}
			<dot:LinkButton Visible="{value: !IsCompleted}"
							Click="{command: _parent.CompleteTask(_this)}" />
		</div>
	</dot:Repeater>
</div>
								]]>
			</StartupCode>
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: AddedTaskTitle}" />
	<dot:Button Text="Add Task" Click="{command: AddTask()}" />
</p>
<div>
	<dot:Repeater DataSource="{value: Tasks}">
		<div class="{value: IsCompleted ? 'task-completed' : 'task'}">
			{{value: Title}}
			<dot:LinkButton Visible="{value: !IsCompleted}"
							Click="{command: _parent.CompleteTask(_this)}" />
		</div>
	</dot:Repeater>
</div>
								]]>
			</FinalCode>
		</Step>

		<!-- 14-->
		<Step Type="Info">
			<Title>Gratulujeme!</Title>
			<Description>
				<![CDATA[
**Dokončili jste druhý kurz.**

Naučili jste se využívat komponentu `Repeater` a seznamy ve viewmodelu.
								]]>
			</Description>
			<ShadowBoxDescription />
		</Step>
	</Steps>
</Lesson>