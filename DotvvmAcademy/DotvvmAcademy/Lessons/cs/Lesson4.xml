<?xml version="1.0" encoding="UTF-8"?>
<Lesson>
	<ValidatorsNamespace>DotvvmAcademy.Steps.Validation.Validators.Lesson4</ValidatorsNamespace>
	<Steps>
		<!--1-->
		<Step Type="Info">
			<Title>Úvod</Title>
			<Description>
				<![CDATA[
V tomto kurzu se podiváme na validaci v DotVVM.

Naučíte se používat atributy Data Annotations a psát pokročilejší validační logiku.
								]]>
			</Description>
		</Step>

		<!--2-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Validační atributy</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step2Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Označte vlastnosti `City` a `ZIP` atributem `[Required]`. Validace se postará o to, aby tyto vlastnosti nezůstali prázdné.

Označte vlastnost `Email` atributem `[EmailAddress]`. Validace se postará o to, aby tato vlastnost nezůstalá prázdná a taktéž, aby email byl ve správném formátu.
]]>
			</Description>
			<StartupCode>
				<![CDATA[
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson4ViewModel
	{
		//přidjte atribut Required 
		public string City { get; set; }
		//přidjte atribut Required 
		public string ZIP { get; set; }
		//přidjte atribut EmailAddress
    public string Email { get; set; }
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson4ViewModel
	{
		[Required]
		public string City { get; set; }
		[Required]
		public string ZIP { get; set; }
		[EmailAddress]
		public string Email { get; set; }
	}
}
]]>
			</FinalCode>

			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.EmailAddressAttribute
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.RequiredAttribute
												]]>
				</AllowedType>
			</AllowedTypesConstructed>
		</Step>

		<!--3-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Základy validace</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step3Validator</ValidationKey>
			<Description>
				<![CDATA[
Vyvolat validaci na stránce můžete tak, že využijete vlastnosti `Validator.Value`.
V závislosti na nastavení validace se může například přidat CSS třída, pokud vlastnost nebude validní.

Vlastnost `Validator.Value` můžete přidat na kterýkoli HTML tag nebo DotVVM komponentu.
Přidejte tuto vlastnost každému tagu `div` a vytvořte data-bind na stejnou vlastnost, na kterou je napojená příslušná komponenta `TextBox`.
								]]>
			</Description>

			<StartupCode>
				<![CDATA[
 <!-- přidejte vlastnost Validator.Value a vytvořte data-bind na stejnou vlastost jako TextBox -->
<div>
		<dot:TextBox Text="{value: City}" />
</div>
 <!-- přidejte vlastnost Validator.Value a vytvořte data-bind na stejnou vlastost jako TextBox -->
<div>
	<dot:TextBox Text="{value: ZIP}" />
</div>
 <!-- přidejte vlastnost Validator.Value a vytvořte data-bind na stejnou vlastost jako TextBox -->
<div>
	<dot:TextBox Text="{value: Email}" />
</div>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<div Validator.Value="{value: City}">
	<dot:TextBox Text="{value: City}" />
</div>
<div Validator.Value="{value: ZIP}">
	<dot:TextBox Text="{value: ZIP}" />
</div>
<div Validator.Value="{value: Email}">
	<dot:TextBox Text="{value: Email}" />
</div>
								]]>
			</FinalCode>
		</Step>

		<!--4-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Použití Validation.InvalidCssClass</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step4Validator</ValidationKey>
			<Description>
				<![CDATA[
Pomocí vlastnosti `Validator.Value` jsme označili elementy, které se budou měnit v závislosti 
na validačních nastaveních jednotlivých vlastností
        
Teď musíme specifikovat, co se má stát, když vlastnost nebude validní.
Dejme tomu, že bychom chtěli přidat CSS třídu `has-error` každému tagu `div`, když nebude validní.
CSS třída `has-error` zvýrazní textové pole uvnitř tohoto tagu.

Přidejte vlastnost `Validator.InvalidCssClass="has-error"` každému tagu `div`.
								]]>
			</Description>

			<!--Required element-->
			<StartupCode>
				<![CDATA[
<!-- přidejte Validator.InvalidCssClass -->
<div Validator.Value="{value: City}">
	<dot:TextBox Text="{value: City}" />
</div>
<!-- přidejte Validator.InvalidCssClass -->
<div Validator.Value="{value: ZIP}">
	<dot:TextBox Text="{value: ZIP}" />
</div>
<!-- přidejte Validator.InvalidCssClass -->
<div Validator.Value="{value: Email}">
	<dot:TextBox Text="{value: Email}" />
</div>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<div Validator.Value="{value: City}" Validator.InvalidCssClass="has-error">
	<dot:TextBox Text="{value: City}" />
</div>
<div Validator.Value="{value: ZIP}" Validator.InvalidCssClass="has-error">
	<dot:TextBox Text="{value: ZIP}" />
</div>
<div Validator.Value="{value: Email}" Validator.InvalidCssClass="has-error">
	<dot:TextBox Text="{value: Email}" />
</div>
								]]>
			</FinalCode>
		</Step>

		<!--5-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Globální validační nastavení</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step5Validator</ValidationKey>
			<Description>
				<![CDATA[
Uvádět vlastnost `Validator.InvalidCssClass` na každém validovaném elementu je otravné.       
Nicméně tuto vlastnost můžete použít na kterémkoli elementu a to se promítne na všechny potomky.

Takže tuto vlastnost můžete přidat globálně třeba na element `body`.
        
Teď můžeme smazat vlastnost `Validator.InvalidCssClass` ze všech tagu `div` a obalit je elementem `form`, kterému tuto vlastnost přidáme.     
								]]>
			</Description>

			<!--Required element-->
			<StartupCode>
				<![CDATA[
<!-- obalte elementem form a přidejte vlastnost Validator.InvalidCssClass -->

	<!-- vymažte přebytečnou vlastnost Validator.InvalidCssClass-->
	<div Validator.Value="{value: City}" Validator.InvalidCssClass="has-error">
		<dot:TextBox Text="{value: City}" />
	</div>
	<!-- vymažte přebytečnou vlastnost Validator.InvalidCssClass-->
	<div Validator.Value="{value: ZIP}" Validator.InvalidCssClass="has-error">
		<dot:TextBox Text="{value: ZIP}" />
	</div>
	<!-- vymažte přebytečnou vlastnost Validator.InvalidCssClass-->
	<div Validator.Value="{value: Email}" Validator.InvalidCssClass="has-error">
		<dot:TextBox Text="{value: Email}" />
	</div>
<!--don't forget close form element-->
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<form Validator.InvalidCssClass="has-error">
	<div Validator.Value="{value: City}">
		<dot:TextBox Text="{value: City}" />
	</div>
	<div Validator.Value="{value: ZIP}">
		<dot:TextBox Text="{value: ZIP}" />
	</div>
	<div Validator.Value="{value: Email}">
		<dot:TextBox Text="{value: Email}" />
	</div>
</form>
								]]>
			</FinalCode>
		</Step>

		<!--6-->
		<Step Type="Info">
			<!--Required element-->
			<Title>Komponenta Validator</Title>
			<!--Required element-->
			<Description>
				<![CDATA[
Pokud chcete zobrazit jen chybovou hlášku, můžete využít komponenty `dot:Validator`.

Tato komponenta má vlastnosti `ShowErrorMessageText` a `SetToolTipText`
Pokud jsou tyto vlastnosti nastavené, chybová hláška je generovaná atributem `[Required]` a bude zobrazená uvnitř komponenty `Validator` nebo jako tooltip na elementu.

Více naleznete v dokumentaci této komponenty [documentation](https://www.dotvvm.com/docs/controls/builtin/Validator/latest).
								]]>
			</Description>
		</Step>

		<!--7-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Použití komponenty Validator</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step7Validator</ValidationKey>
			<Description>
				<![CDATA[
Přidejte komponentu `Validator` do třetího tagu `div` a nastavte jeho vlastnost `Value` na `Email` ve viewmodelu.         

Taktéž nastavte vlastnost komponenty `ShowErrorMessageText` na "true".
								]]>
			</Description>
			<!--Optional element-->
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<form Validator.InvalidCssClass="has-error">
	<div Validator.Value="{value: City}">
		<dot:TextBox Text="{value: City}" />
	</div>
	<div Validator.Value="{value: ZIP}">
		<dot:TextBox Text="{value: ZIP}" />
	</div>
	<div Validator.Value="{value: Email}">
		<dot:TextBox Text="{value: Email}" />
		<!-- zde použijte Validator a nastavte to na vlastnost Email-->
	</div>
</form>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<form Validator.InvalidCssClass="has-error">
	<div Validator.Value="{value: City}">
		<dot:TextBox Text="{value: City}" />
	</div>
	<div Validator.Value="{value: ZIP}">
		<dot:TextBox Text="{value: ZIP}" />
	</div>
	<div Validator.Value="{value: Email}">
		<dot:TextBox Text="{value: Email}" />
		<dot:Validator Value="{value: Email}" ShowErrorMessageText="true" />
	</div>
</form>
								]]>
			</FinalCode>
		</Step>

		<!--8-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Využití komponenty ValidationSummary</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step8Validator</ValidationKey>
			<Description>
				<![CDATA[
K zobrazení všech chybových hlášek, využijte komponentu `ValidationSummary`.

Přidejte tuto komponentu za `</form>`
								]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<form Validator.InvalidCssClass="has-error">
	<div Validator.Value="{value: City}">
		<dot:TextBox Text="{value: City}" />
	</div>
	<div Validator.Value="{value: ZIP}">
		<dot:TextBox Text="{value: ZIP}" />
	</div>
	<div Validator.Value="{value: Email}">
		<dot:TextBox Text="{value: Email}" />
	</div>
</form>
<!-- přidejte komponentu `ValidationSummary` -->
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<form Validator.InvalidCssClass="has-error">
	<div Validator.Value="{value: City}">
		<dot:TextBox Text="{value: City}" />
	</div>
	<div Validator.Value="{value: ZIP}">
		<dot:TextBox Text="{value: ZIP}" />
	</div>
	<div Validator.Value="{value: Email}">
		<dot:TextBox Text="{value: Email}" />
	</div>
</form>
<dot:ValidationSummary />
								]]>
			</FinalCode>
		</Step>

		<!--9-->
		<Step Type="Info">
			<!--Required element-->
			<Title>Částečná validace</Title>
			<!--Required element-->
			<Description>
				<![CDATA[
Implicitně validaci spouští kterékoli tlačítko a to na celém viewmodelu
Pokud se někde ve viewmodelu vyskytne chyba, příkaz se neprovede.

Nicméně, viewmodel často obsahuje objekty, které nechceme validovat vůbec.

V tomto případě můžete využít `Validation.Target="{value: NejakaVlastnost}"`. 
Toto se dá aplikovat na kterýkoli element či komponentu v DotVVM.

Uvnitř tohoto elementu či komponenty se validace provede pouze nad objektem, který byl dosazen do vlastnosti `Validation.Target`.
								]]>
			</Description>
		</Step>

		<!--10-->
		<Step Type="Info">
			<!--Required element-->
			<Title>Částečná validace II</Title>
			<!--Required element-->
			<Description>
				<![CDATA[
Úplně vypnout validaci můžete přidáním `Validation.Enabled="false"`. Toto nastavení se taktéž aplikuje na všechny potomky elementu, 
na kterém je tato vlastnost nastavená.
        
Všiměte si, že se validace spouští bindingem jako `{command: nejakyPrikaz()}`.

Proto se vlastnost `Validation.Enabled` nebo `Validation.Target` musí nastavovat na tlačítku nebo komponentě, co ma binding na příkaz.
Vypnutí validace na jednotlivých textových polích formy nebude mít žádný efekt.
								]]>
			</Description>
		</Step>

		<!--11-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Přidání vlastností do ViewModelu</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step11Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Nadeklarujte vlastnosti `SubscriptionFrom` a `SubscriptionTo` typu `DateTime` ve viewmodelu.

Musíme se ujistit, že jedna vlastnost obsahuje menší veličinu než druhá.
]]>
			</Description>

			<!--Required element-->
			<StartupCode>
				<![CDATA[
using System;
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson4ViewModel
	{
		[Required]
		public string City { get; set; }
		[Required]
		public string ZIP { get; set; }
		[EmailAddress]
		public string Email { get; set; }

		// přidejte vlastnost SubscriptionFrom
		// přidejte vlastnost SubscriptionTo 
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System;
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson4ViewModel
	{
		[Required]
		public string City { get; set; }
		[Required]
		public string ZIP { get; set; }
		[EmailAddress]
		public string Email { get; set; }

		public DateTime SubscriptionFrom { get; set; }
		public DateTime SubscriptionTo { get; set; }
	}
}
]]>
			</FinalCode>

			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.EmailAddressAttribute
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.RequiredAttribute
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.DateTime
												]]>
				</AllowedType>
			</AllowedTypesConstructed>

			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.ComponentModel.DataAnnotations.RequiredAttribute.IsValid
												]]>
				</AllowedMethod>
				<AllowedMethod>
					<![CDATA[
System.ComponentModel.DataAnnotations.EmailAddressAttribute.IsValid
												]]>
				</AllowedMethod>
			</AllowedMethodsCalled>
		</Step>

		<!--13-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Implementace prostředí IValidatableObject</Title>
			<!--Required element-->
			<ValidationKey>Lesson4Step13Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Validaci vlastností `SubscriptionFrom` a `SubscriptionTo` budeme provádět v kódu C#      
Musíme napsat validační pravidlo, které by zjišťovalo, kdy je `SubscriptionFrom` větší než `SubscriptionTo`.

Začneme tím, že `Lesson4ViewModel` musí implementovat prostředí `IValidatableObject`. Toto prostředí obsahuje metodu `Validate`, která musí vracet seznam validačních chyb.
Jsou spojené s chybami, co jsou vráceny validačními atributy, takže se nemusíte starat o další vlastnosti.

Z této metody můžeme vrátit novou validační chybu pomocí `yield return new ValidationResult("error message")`. 
Vraťte tuto chybu, pokud bude `SubscriptionFrom` větší než `SubscriptionTo`.
]]>
			</Description>
			<!--Optional element-->
			<StartupCode>
				<![CDATA[
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson4ViewModel : IValidatableObject
	{
		[Required]
		public string City { get; set; }
		[Required]
		public string ZIP { get; set; }
		[EmailAddress]
		public string Email { get; set; }
		public DateTime SubscriptionFrom { get; set; }
		public DateTime SubscriptionTo { get; set; }

		public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
		{
			// zkontrolujte, zda je `SubscriptionFrom` větší než `SubscriptionTo` a vraťte yield return new ValidationResult("error message");
		}
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson4ViewModel : IValidatableObject
	{
		[Required]
		public string City { get; set; }
		[Required]
		public string ZIP { get; set; }
		[EmailAddress]
		public string Email { get; set; }
		public DateTime SubscriptionFrom { get; set; }
		public DateTime SubscriptionTo { get; set; }

		public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
		{
			if (SubscriptionFrom > SubscriptionTo)
			{
				yield return new ValidationResult("SubscriptionFrom should be less that SubscriptionTo!");
			}
		}
	}
}
]]>
			</FinalCode>

			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.EmailAddressAttribute
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.RequiredAttribute
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.DateTime
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.IValidatableObject
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<System.ComponentModel.DataAnnotations.ValidationResult>
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
System.ComponentModel.DataAnnotations.ValidationResult
												]]>
				</AllowedType>
			</AllowedTypesConstructed>
			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.Collections.Generic.List<System.ComponentModel.DataAnnotations.ValidationResult>.Add
												]]>
				</AllowedMethod>
			</AllowedMethodsCalled>
		</Step>

		<!--Required element-->
		<Step Type="Info">
			<Title>Gratulujeme!</Title>
			<Description>
				<![CDATA[
**Dokončili jste čtvrtý kurz!**

Naučili jste používat validaci v DotVVM!
								]]>
			</Description>
		</Step>
	</Steps>
</Lesson>