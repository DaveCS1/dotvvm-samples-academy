<?xml version="1.0" encoding="UTF-8"?>

<Lesson>
	<ValidatorsNamespace>DotvvmAcademy.Steps.Validation.Validators.Lesson3</ValidatorsNamespace>
	<Steps>

		<!--1-->
		<Step Type="Info">
			<!--Required element-->
			<Title>Элементы управления</Title>
			<!--Required element-->
			<Description>
				<![CDATA[
В этом уроке, вы узнаете, как использовать `TextBox`, `CheckBox`, `RadioButton` и `ComboBox`. Мы построим простую форму с деталями клиента.
								]]>
			</Description>
		</Step>

		<!--2-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Добавление свойств FirstName и LastName</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step2Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Объявите свойства `FirstName` и `LastName` типа `string` в следующем классе.
]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		// объявите свойства здесь
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
	}
}
]]>
			</FinalCode>
		</Step>

		<!--3-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Используем TextBox-ы</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step3Validator</ValidationKey>
			<Description>
				<![CDATA[
Добавьте 2 элемента TextBox на страницу и свяжите их свойство `Text` со свойствами `FirstName` и `LastName`.
								]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<p>
	<!-- разместите первый textbox здесь -->
	<!-- разместите второй textbox здесь -->
</p>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}"/>
	<dot:TextBox Text="{value: LastName}"/>
</p>
								]]>
			</FinalCode>
		</Step>

		<!--4-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Добавляем свойство Role</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step4Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Объявите свойство `Role` типа `string` во viewmodel.
]]>
			</Description>

			<StartupCode>
				<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		// добавьте свойство Role
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
	}
}
]]>
			</FinalCode>
		</Step>

		<!--5-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Используем RadioButton-ы</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step5Validator</ValidationKey>
			<Description>
				<![CDATA[
Добавьте 2 элемента `RadioButton` на страницу.

Свойство 'Text' определяет текст "метки" для переключателя (RadioButton). Установите `Text` первого из них как "Admin" и `Text` второго как "User".

`CheckedItem` определяет, какие свойства ViewModel использовать. Установите `Role` на обе кнопки.

И, наконец, `CheckedValue`, оно определяет значение, которое будет храниться в` Role`. Установите первый как "А", а второй как "U". 
								]]>
			</Description>

			<!--Required element-->
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}"/>
	<dot:TextBox Text="{value: LastName}"/>
</p>
<p>
	Role: 
	<!-- разместите первый RadioButton здесь -->
	<!-- разместите второй RadioButton здесь -->
</p>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}"/>
	<dot:TextBox Text="{value: LastName}"/>
</p>
<p>
	Role: 
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin"/>
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User"/>
</p>
								]]>
			</FinalCode>

		</Step>

		<!--6-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Добавляем свойство Interests</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step6Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Объявите свойство `Interests` типа `List<string>`.
]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		// добавьте свойство Interests и инициализируйте его
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[

using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		public List<string> Interests { get; set; } = new List<string>();
	}
}
]]>
			</FinalCode>
			<!--Optional element-->
			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<string>
												]]>
				</AllowedType>
			</AllowedTypesConstructed>

		</Step>

		<!--7-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Используем CheckBox-ы</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step7Validator</ValidationKey>
			<Description>
				<![CDATA[
Добавьте 3 элемента `CheckBox` на страницу.
Свяжите их свойство `CheckedItems` с `Interests`, чтобы указать, где проверяемые элементы будут расположены.

Затем установите `Text` как "Music", "Sports" и "News".

И, наконец, установите `CheckedValue` на "M", "S" и "N". Эти значения будут сохранены в коллекции `Interests`, когда соответствующий "флажок" будет проверен.
								]]>
			</Description>

			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}"/>
	<dot:TextBox Text="{value: LastName}"/>
</p>
<p>
	Role: 
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin"/>
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User"/>
</p>
<p>
	<!-- разместите первый CheckBox здесь -->
	<!-- разместите второй CheckBox здесь -->
	<!-- разместите третий CheckBox здесь -->
</p>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}"/>
	<dot:TextBox Text="{value: LastName}"/>
</p>
<p>
 Role: 
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin"/>
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User"/>
</p>
<p>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Music" CheckedValue="M"/>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Sports" CheckedValue="S"/>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="News" CheckedValue="N"/>
</p>
								]]>
			</FinalCode>
		</Step>

		<!--8-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Добавляем класс CountryInfo</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step8Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Создайте новый класс `CountryInfo` со свойством `Id` типа `int` и свойством `Name` типа `string`.
]]>
			</Description>
			<!--Optional element-->

			<StartupCode>
				<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels 
{
	// создайте CountryInfo здесь
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class CountryInfo 
	{
		public int Id { get; set; }
		public string Name { get; set; }
	}
}
]]>
			</FinalCode>
		</Step>

		<!--9-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Добавляем список Countries</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step9Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Объявите свойство `Countries` типа `List<CountryInfo>` и свойство `SelectedCountryId` типа `int`.
]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		// объявите лист Countries
		// объявите SelectedCountryId 
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		public int SelectedCountryId { get; set; }
		public List<CountryInfo> Countries { get; set; } = new List<CountryInfo>();
	}
}
]]>
			</FinalCode>

			<!--Optional element-->
			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class CountryInfo 
	{
		public int Id { get; set; }
		public string Name { get; set; }
	}
}
												]]>
				</CodeDependency>
			</CodeDependencies>


			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>
												]]>
				</AllowedType>
			</AllowedTypesConstructed>
		</Step>

		<!--10-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Инициализируем список Countries</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step10Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Создайте коструктор и инициализируйте лист `Countries` со следующими значениями:

* "USA" с `Id` = 1
* "Canada" с `Id` = 2
]]>
			</Description>
			<!--Optional element-->
			<StartupCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels
{
	public class Lesson3ViewModel 
	{
		public Lesson3ViewModel() 
		{
			// добавьте необходимые объекты в Countries
		}
  
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		public int SelectedCountryId { get; set; }
		public List<CountryInfo> Countries { get; set; } = new List<CountryInfo>();
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		public Lesson3ViewModel()
		{
			Countries.Add(new CountryInfo() { Id = 1, Name = "USA" });
			Countries.Add(new CountryInfo() { Id = 2, Name = "Canada" });
		}
  
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		public int SelectedCountryId { get; set; }
		public List<CountryInfo> Countries { get; set; } = new List<CountryInfo>();
	}
}
]]>
			</FinalCode>

			<!--Optional element-->
			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class CountryInfo 
	{
		public int Id { get; set; }
		public string Name { get; set; }
	}
}
												]]>
				</CodeDependency>
			</CodeDependencies>
			<!--Optional element-->
			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
DotvvmAcademy.Tutorial.ViewModels.CountryInfo
												]]>
				</AllowedType>
			</AllowedTypesConstructed>
			<!--Optional element-->
			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>.Add
												]]>
				</AllowedMethod>
			</AllowedMethodsCalled>
		</Step>

		<!--11-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Используем ComboBox</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step11Validator</ValidationKey>
			<Description>
				<![CDATA[
Добавьте элемент `ComboBox` на страницу и свяжите его свойство `DataSource` с `Countries`. `ComboBox` будет наполнен списком со странами, которые мы инициализируем в конструкторе.

Элементу `ComboBox` нужно указать , что свойство `Name` из класса `CountryInfo` должно быть отображено. Установите `DisplayMember` как "Name".

Когда пользователь выбирает какой-то элемент, мы хотим использовать `Id` от выбранного объекта` CountryInfo` в качестве выбранного значения. Установим `ValueMember` на "Id".

И, наконец, мы должны определить, где выбранное значение будет сохранено. Свяжите `SelectedValue` со свойством `SelectedCountryId` в ViewModel.
								]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}"/>
	<dot:TextBox Text="{value: LastName}"/>
</p>
<p>
 Role: 
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin"/>
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User"/>
</p>
<p>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Music" CheckedValue="M"/>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Sports" CheckedValue="S"/>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="News" CheckedValue="N"/>
</p>
<p>
 <!-- создайте ComboBox здесь -->
</p>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}"/>
	<dot:TextBox Text="{value: LastName}"/>
</p>
<p>
 Role: 
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin"/>
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User"/>
</p>
<p>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Music" CheckedValue="M"/>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="Sports" CheckedValue="S"/>
	<dot:CheckBox CheckedItems="{value: Interests}" Text="News" CheckedValue="N"/>
</p>
<p>
	<dot:ComboBox DataSource="{value: Countries}"
        SelectedValue="{value: SelectedCountryId}"
        ValueMember="Id"
        DisplayMember="Name" />
</p>
								]]>
			</FinalCode>
		</Step>

		<!--12-->
		<Step Type="Info">
			<!--Required element-->
			<Title>Класс CustomerInfo</Title>
			<!--Required element-->
			<Description>
				<![CDATA[
В предыдущих шагах, мы разместили все свойства - `FirstName`, `LastName`, `Role` и `SelectedCountryId` в одном классе с коллекцией `Countries`.

Это не лучшая практика, потому что мы смешиваем информацию о конкретном заказчике с некоторыми другими данными, например, списком стран.
Было бы неплохо отделить свойства, которые представляют состояние некоторого объекта (заказчика, в данном случае), в отдельный класс.
Этот класс содержал бы только свойства и никаких методов.
Это называется DTO - Объект передачи данных (Data Transfer Object).

Итак, мы перемещаем свойства в классе `CustomerInfo`:

```CSHARP
public class CustomerInfo
{
	public string FirstName { get; set; }
	public string LastName { get; set; }
	public string Role { get; set; }
	public int SelectedCountryId { get; set; }
}
```

`Countries` остается в viewmodel.
								]]>
			</Description>
		</Step>

		<!--13-->
		<Step Type="CsharpCode">
			<!--Required element-->
			<Title>Добавляем свойство CustomerInfo</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step13Validator</ValidationKey>
			<!--Required element-->
			<Description>
				<![CDATA[
Объявите новое свойство `NewCustomer` типа `CustomerInfo`.
]]>
			</Description>

			<!--Required element-->
			<StartupCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		public Lesson3ViewModel()
		{
			Countries.Add(new CountryInfo() { Id = 1, Name = "USA" });
			Countries.Add(new CountryInfo() { Id = 2, Name = "Canada" });
		}
		
		// добавьте свойство NewCustomer
  
		public List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo> Countries { get; set; } = new List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>();
	}
}
]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
using System.Collections.Generic;

namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class Lesson3ViewModel 
	{
		public Lesson3ViewModel ()
		{
			Countries.Add(new CountryInfo() { Id = 1, Name = "USA" });
			Countries.Add(new CountryInfo() { Id = 2, Name = "Canada" });
		}
  
		public CustomerInfo NewCustomer { get; set; }
  
		public List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo> Countries { get; set; } = new List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>();
	}
}
]]>
			</FinalCode>

			<!--Optional element-->
			<CodeDependencies>
				<CodeDependency>
					<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class CountryInfo 
	{
		public int Id { get; set; }
		public string Name { get; set; }
	}
}
												]]>
				</CodeDependency>
				<CodeDependency>
					<![CDATA[
namespace DotvvmAcademy.Tutorial.ViewModels 
{
	public class CustomerInfo
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string Role { get; set; }
		public int SelectedCountryId { get; set; }
	}
}
												]]>
				</CodeDependency>
			</CodeDependencies>
			<!--Optional element-->
			<AllowedTypesConstructed>
				<AllowedType>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
DotvvmAcademy.Tutorial.ViewModels.CountryInfo
												]]>
				</AllowedType>
				<AllowedType>
					<![CDATA[
DotvvmAcademy.Tutorial.ViewModels.CustomerInfo
										]]>
				</AllowedType>
			</AllowedTypesConstructed>
			<!--Optional element-->
			<AllowedMethodsCalled>
				<AllowedMethod>
					<![CDATA[
System.Collections.Generic.List<DotvvmAcademy.Tutorial.ViewModels.CountryInfo>.Add
												]]>
				</AllowedMethod>
			</AllowedMethodsCalled>
		</Step>

		<!--14-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Используем свойство DataContext</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step14Validator</ValidationKey>
			<Description>
				<![CDATA[
Теперь привязки на странице не правильные, потому что ViewModel не содержит `FirstName` и другие свойства.
Они изменили на `NewCustomer.FirstName`.

В реальных приложениях, вы хотите, чтобы избежать сложных привязок, как `NewCustomer.FirstName`. Вместо этого, вы можете использовать свойство `DataContext`.
Вы можете установить свойство любого HTML или DotVVM элемента.

Это свойство говорит DotVVM, что все привязки внутри данного элемента или управления оцениваются на выражение, которое вы передаете в `DataContext`.

Таким образом, обернув всю форму в `<div DataContext="{value: NewCustomer}">`. Вы можете держать DataBindings внутри, без изменений.
								]]>
			</Description>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<p>
	<dot:TextBox Text="{value: FirstName}"/>
	<dot:TextBox Text="{value: LastName}"/>
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin"/>
	<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User"/>
	<dot:ComboBox DataSource="{value: Countries}"
			SelectedValue="{value: SelectedCountryId}"
			ValueMember="Id"
			DisplayMember="Name">
	</dot:ComboBox>
</p>

								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<div DataContext="{value: NewCustomer}">
	<p>
		<dot:TextBox Text="{value: FirstName}"/>
		<dot:TextBox Text="{value: LastName}"/>
		<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin"/>
		<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User"/>
		<dot:ComboBox DataSource="{value: Countries}"
				SelectedValue="{value: SelectedCountryId}"
				ValueMember="Id"
				DisplayMember="Name">
		</dot:ComboBox>
	</p>
</div>
								]]>
			</FinalCode>
		</Step>

		<!--15-->
		<Step Type="DothtmlCode">
			<!--Required element-->
			<Title>Исправляем ошибку ComboBox</Title>
			<!--Required element-->
			<ValidationKey>Lesson3Step15Validator</ValidationKey>
			<Description>
				<![CDATA[
Теперь у нас есть ошибка в коде, потому что `ComboBox` имеет `DataSource` установленный как `Countries`, который не существует в объекте `NewCustomer`,
потому что список всех стран, не является частью информации о клиенте.

Эта коллекция находится в ViewModel, поэтому в основном мы должны получить доступ к родительской привязки контекста.

Измените привязку `DataSource` на  `_parent.Countries`, чтобы устранить проблему.
								]]>
			</Description>
			<!--Optional element-->
			<ShadowBoxDescription>
				<![CDATA[
В каждом выражении-связывания (binding) вы можете использовать переменные `_parent`, `_this` и `_root`. 

* `_parent` представляет родительский контекст
* `_this` актуальный контекст
* `_root` всегда viewmodel страницы.


								]]>
			</ShadowBoxDescription>
			<!--Required element-->
			<StartupCode>
				<![CDATA[
<div DataContext="{value: NewCustomer}">
	<p>
		<dot:TextBox Text="{value: FirstName}"/>
		<dot:TextBox Text="{value: LastName}"/>
		<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin"/>
		<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User"/>
				
		<!--Измените привязку DataSource что бы использовать родительский контекст-->
		<dot:ComboBox DataSource="{value: Countries}"
				SelectedValue="{value: SelectedCountryId}"
				ValueMember="Id"
				DisplayMember="Name">
		</dot:ComboBox>
	</p>
</div>
								]]>
			</StartupCode>
			<!--Required element-->
			<FinalCode>
				<![CDATA[
<div DataContext="{value: NewCustomer}">
	<p>
		<dot:TextBox Text="{value: FirstName}"/>
		<dot:TextBox Text="{value: LastName}"/>
		<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="A" Text="Admin"/>
		<dot:RadioButton CheckedItem="{value: Role}" CheckedValue="U" Text="User"/>
    
		<dot:ComboBox DataSource="{value: _parent.Countries}"
				SelectedValue="{value: SelectedCountryId}"
				ValueMember="Id"
				DisplayMember="Name">
		</dot:ComboBox>
	</p>
</div>
								]]>
			</FinalCode>
			<!--16-->
		</Step>

		<Step Type="Info">
			<Title>Поздравляем</Title>
			<Description>
				<![CDATA[
**Вы закончили третий урок!**

Вы научились использовать `ComboBox` и работать с привязкой контекста!
								]]>
			</Description>
			<ShadowBoxDescription />
		</Step>

	</Steps>


</Lesson>