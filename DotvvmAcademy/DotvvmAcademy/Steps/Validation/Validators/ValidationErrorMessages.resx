<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClassDoesNotImplementInterface" xml:space="preserve">
    <value>The class {0} does not implement the {1} interface!</value>
  </data>
  <data name="ClassNotFound" xml:space="preserve">
    <value>The class {0} was not found! Make sure the name is correct and that the class is declared as public!</value>
  </data>
  <data name="CommandBindingExpected" xml:space="preserve">
    <value>The {0} property {1} must contain binding in the following format: {{command: Something()}}</value>
  </data>
  <data name="CommandDoesNotHaveParenthesis" xml:space="preserve">
    <value>You need to add empty parenthesis after the {0} method.</value>
  </data>
  <data name="CommandMethodError" xml:space="preserve">
    <value>The command methods in the viewmodel must be public and must have the correct signature!</value>
  </data>
  <data name="DeleteCodeError" xml:space="preserve">
    <value>You should delete the {0} property from {1}!</value>
  </data>
  <data name="HtmlTagCountError" xml:space="preserve">
    <value>There should be {0} {1} HTML tag in the page!</value>
  </data>
  <data name="IllegalConstructorCall" xml:space="preserve">
    <value>The constructor of type {0} is not allowed!</value>
  </data>
  <data name="IllegalMethodCall" xml:space="preserve">
    <value>The method {0} is not allowed!</value>
  </data>
  <data name="MethodNotFound" xml:space="preserve">
    <value>The {0} method doesn't exist! Make sure it has the correct name and is declared as public!</value>
  </data>
  <data name="MethodWasNotCalled" xml:space="preserve">
    <value>You must call the {0} in the command binding!</value>
  </data>
  <data name="MissingPropertyError" xml:space="preserve">
    <value>The {0} does not specify the {1} property!</value>
  </data>
  <data name="PropertyNotFound" xml:space="preserve">
    <value>The {0} property was not found or doesn't have a correct type!</value>
  </data>
  <data name="PropertyValueError" xml:space="preserve">
    <value>The {0} property should contain the value '{1}'!</value>
  </data>
  <data name="StepTypeExpected" xml:space="preserve">
    <value>Step type {0} is not supported!</value>
  </data>
  <data name="TextBoxBindingsError" xml:space="preserve">
    <value>Each TextBox should bind to a different property in the viewmodel!</value>
  </data>
  <data name="TypeControlCountError" xml:space="preserve">
    <value>There should be {0} {1} controls in the page!</value>
  </data>
  <data name="ValueBindingError" xml:space="preserve">
    <value>The {0} should be bind to {1}!</value>
  </data>
  <data name="ValueBindingExpected" xml:space="preserve">
    <value>The {0} property {1} must contain binding in the following format: {{value: Something}}</value>
  </data>
</root>